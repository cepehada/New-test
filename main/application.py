"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –∑–∞–ø—É—Å–∫ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã.
"""

import asyncio
import signal
import sys

from project.bots.strategies.strategy_manager import StrategyManager
from project.config import get_config
from project.infrastructure.database import Database
from project.infrastructure.message_broker import MessageBroker
from project.integrations.telegram_integration import TelegramIntegration
from project.main.eventloop import setup_event_loop
from project.utils.error_handler import setup_error_handlers
from project.utils.logging_utils import get_logger

logger = get_logger(__name__)


class Application:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —É–ø—Ä–∞–≤–ª—è—é—â–∏–π –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.
    """

    def __init__(self):
        self.config = get_config()
        self.loop = None
        self.is_running = False
        self.components = {}
        self.shutdown_tasks = set()

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.components["database"] = Database.get_instance()
        await self.components["database"].initialize()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–æ–∫–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.components["message_broker"] = MessageBroker.get_instance()
        await self.components["message_broker"].initialize()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.components["strategy_manager"] = StrategyManager()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        if self.config.TELEGRAM_BOT_TOKEN:
            self.components["telegram"] = TelegramIntegration()
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            asyncio.create_task(self.components["telegram"].start_polling())

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        for signame in ("SIGINT", "SIGTERM"):
            self.loop.add_signal_handler(
                getattr(signal, signame),
                lambda signame=signame: asyncio.create_task(self.shutdown(signame)),
            )

        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        self.is_running = True

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –≤—Å–µ—Ö –µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–∏–∫–ª–∞ —Å–æ–±—ã—Ç–∏–π
            self.loop = asyncio.get_running_loop()
            setup_event_loop(self.loop)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self.initialize()

            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if self.config.ENABLE_BACKTESTING:
                await self.start_backtesting()
            # –ò–Ω–∞—á–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            else:
                await self.start_trading()

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            while self.is_running:
                await asyncio.sleep(1)

        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}" %, exc_info=True)
            await self.shutdown("ERROR")

    async def start_trading(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        logger.info("–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")

        # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        strategy_manager = self.components["strategy_manager"]

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        # TODO: –ó–∞–≥—Ä—É–∂–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –ë–î
        strategy_id = await strategy_manager.start_strategy(
            "main_strategy",
            exchange_id="binance",
            symbols=["BTC/USDT", "ETH/USDT"],
            interval="1h",
        )

        logger.info("–°—Ç—Ä–∞—Ç–µ–≥–∏—è main_strategy –∑–∞–ø—É—â–µ–Ω–∞ —Å ID: {strategy_id}" %)

        if self.components.get("telegram"):
            await self.components["telegram"].broadcast_message(
                "üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ"
            )

    async def start_backtesting(self):
        """–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("–ó–∞–ø—É—Å–∫ —Ä–µ–∂–∏–º–∞ –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

        # –¢—É—Ç –∫–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # ...

        if self.components.get("telegram"):
            await self.components["telegram"].broadcast_message(
                "üìä –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –±—ç–∫—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )

    async def shutdown(self, signal_name=None):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if signal_name:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signal_name}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É..." %)

        self.is_running = False

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        if "strategy_manager" in self.components:
            try:
                strategy_manager = self.components["strategy_manager"]
                for strategy_id in list(strategy_manager.running_strategies.keys()):
                    await strategy_manager.stop_strategy(strategy_id)
                logger.info("–í—Å–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {str(e)}" %)

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±—Ä–æ–∫–µ—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π
        if "message_broker" in self.components:
            try:
                await self.components["message_broker"].close()
                logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±—Ä–æ–∫–µ—Ä–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç—ã")
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–æ–∫–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}" %)

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if "database" in self.components:
            try:
                await self.components["database"].close()
                logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã")
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î: {str(e)}" %)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        if "telegram" in self.components:
            try:
                await self.components["telegram"].broadcast_message(
                    "üõë –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É"
                )
                await self.components["telegram"].close()
                logger.info("Telegram-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Telegram-–±–æ—Ç–∞: {str(e)}" %)

        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–¥–∞—á
        tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
        for task in tasks:
            task.cancel()

        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–æ —Ä–∞–±–æ—Ç—É")

        # –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        if signal_name != "ERROR":
            sys.exit(0)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫
    setup_error_handlers()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = Application()

    try:
        asyncio.run(app.start())
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
    except Exception as e:
        logger.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}" %, exc_info=True)
        sys.exit(1)


if __name__ == "__main__":
    main()
