"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.
"""

import traceback
from typing import Awaitable, Callable, Dict, List, Optional, Union

from aiogram import Bot, Dispatcher, types
from aiogram.types import InputFile, ParseMode
from aiogram.utils.exceptions import TelegramAPIError
from project.config import get_config
from project.utils.error_handler import async_handle_error
from project.utils.logging_utils import get_logger

logger = get_logger(__name__)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
CommandHandler = Callable[[types.Message, List[str]], Awaitable[Optional[str]]]


class TelegramIntegration:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram API —á–µ—Ä–µ–∑ –±–æ—Ç–∞.
    """

    _instance = None

    @classmethod
    def get_instance(cls) -> "TelegramIntegration":
        """
        –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram (Singleton).

        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ TelegramIntegration
        """
        if cls._instance is None:
            cls._instance = cls()
        return cls._instance

    def __init__(self, token: Optional[str] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram.

        Args:
            token: –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞ (None –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        """
        config = get_config()
        self.token = token or config.TELEGRAM_BOT_TOKEN

        if not self.token:
            logger.warning("Telegram-–±–æ—Ç –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å - —Ç–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω")
            self.bot = None
            self.dp = None
            return

        self.bot = Bot(token=self.token)
        self.dp = Dispatcher(self.bot)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        tg_settings = config.get_telegram_settings()
        self.allowed_users = tg_settings.ALLOWED_USERS
        self.default_chat_id = tg_settings.CHAT_ID

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.command_handlers: Dict[str, CommandHandler] = {}

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self._register_base_handlers()

        logger.info(
            f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞, —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(self.allowed_users)}"
        )

    def _register_base_handlers(self) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥.
        """
        if not self.dp:
            return

        @self.dp.message_handler(commands=["start", "help"])
        async def cmd_start(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ /start –∏ /help"""
            if str(message.from_user.id) not in self.allowed_users:
                await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
                return

            help_text = (
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞!\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
                "/orders - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞\n"
                "/balance - –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å\n"
                "/start_strategy <name> - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é\n"
                "/stop_strategy <id> - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é\n"
            )
            await message.reply(help_text)

        @self.dp.message_handler()
        async def handle_message(message: types.Message):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if str(message.from_user.id) not in self.allowed_users:
                logger.warning(
                    f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –æ—Ç {message.from_user.id}: {message.text}"
                )
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å /
            if not message.text or not message.text.startswith("/"):
                return

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
            parts = message.text.split()
            command = parts[0][1:]  # –£–±–∏—Ä–∞–µ–º —Å–ª–µ—à
            args = parts[1:]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
            if command in self.command_handlers:
                try:
                    handler = self.command_handlers[command]
                    result = await handler(message, args)
                    if result:
                        await self.bot.send_message(
                            chat_id=message.chat.id,
                            text=result,
                            parse_mode=ParseMode.MARKDOWN,
                        )
                except Exception as e:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /{command}:\n```\n{traceback.format_exc()}```"
                    await message.reply(error_msg, parse_mode=ParseMode.MARKDOWN)
                    logger.error(
                        f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã {command}: {str(e)}",
                        exc_info=True,
                    )

    def register_command(self, command: str, handler: CommandHandler) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã.

        Args:
            command: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ /)
            handler: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
        """
        self.command_handlers[command] = handler
        logger.debug(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /{command}")

    @async_handle_error
    async def start_polling(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling.
        """
        if not self.dp:
            logger.warning("Telegram-–±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω - –Ω–µ—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞")
            return

        logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling")
        await self.dp.start_polling()

    @async_handle_error
    async def send_message(
        self,
        chat_id: Optional[str] = None,
        text: str = "",
        parse_mode: Optional[str] = None,
        disable_notification: bool = False,
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.

        Args:
            chat_id: ID —á–∞—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (None –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (HTML, Markdown, MarkdownV2)
            disable_notification: –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏

        Returns:
            True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ, –∏–Ω–∞—á–µ False
        """
        if not self.bot:
            logger.warning("Telegram-–±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return False

        chat_id = chat_id or self.default_chat_id

        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=parse_mode,
                disable_notification=disable_notification,
            )
            logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}".format(chat_id=chat_id))
            return True
        except TelegramAPIError as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {str(e)}"
            )
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {str(e)}")
            return False

    @async_handle_error
    async def broadcast_message(
        self,
        text: str,
        parse_mode: Optional[str] = None,
        disable_notification: bool = False,
    ) -> int:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.

        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (HTML, Markdown, MarkdownV2)
            disable_notification: –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏

        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        if not self.bot:
            logger.warning("Telegram-–±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            return 0

        success_count = 0

        for user_id in self.allowed_users:
            try:
                await self.bot.send_message(
                    chat_id=user_id,
                    text=text,
                    parse_mode=parse_mode,
                    disable_notification=disable_notification,
                )
                success_count += 1
            except Exception as e:
                logger.error(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}"
                )

        logger.debug(
            f"–ì—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {success_count}/{len(self.allowed_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        )
        return success_count

    @async_handle_error
    async def send_photo(
        self,
        chat_id: Optional[str] = None,
        photo: Union[str, InputFile] = None,
        caption: Optional[str] = None,
        parse_mode: Optional[str] = None,
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.

        Args:
            chat_id: ID —á–∞—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (None –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            photo: –ü—É—Ç—å –∫ —Ñ–æ—Ç–æ –∏–ª–∏ –æ–±—ä–µ–∫—Ç InputFile
            caption: –ü–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
            parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏

        Returns:
            True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ, –∏–Ω–∞—á–µ False
        """
        if not self.bot:
            logger.warning("Telegram-–±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Ñ–æ—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return False

        chat_id = chat_id or self.default_chat_id

        try:
            # –ï—Å–ª–∏ photo —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ InputFile
            if isinstance(photo, str):
                photo_file = InputFile(photo)
            else:
                photo_file = photo

            await self.bot.send_photo(
                chat_id=chat_id,
                photo=photo_file,
                caption=caption,
                parse_mode=parse_mode,
            )
            logger.debug("–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}".format(chat_id=chat_id))
            return True
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ —á–∞—Ç {chat_id}: {error}".format(chat_id=chat_id, error=str(e)))
            return False

    @async_handle_error
    async def send_document(
        self,
        chat_id: Optional[str] = None,
        document: Union[str, InputFile] = None,
        caption: Optional[str] = None,
        parse_mode: Optional[str] = None,
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.

        Args:
            chat_id: ID —á–∞—Ç–∞ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (None –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            document: –ü—É—Ç—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É –∏–ª–∏ –æ–±—ä–µ–∫—Ç InputFile
            caption: –ü–æ–¥–ø–∏—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É
            parse_mode: –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏

        Returns:
            True –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ, –∏–Ω–∞—á–µ False
        """
        if not self.bot:
            logger.warning("Telegram-–±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            return False

        chat_id = chat_id or self.default_chat_id

        try:
            # –ï—Å–ª–∏ document —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ InputFile
            if isinstance(document, str):
                document_file = InputFile(document)
            else:
                document_file = document

            await self.bot.send_document(
                chat_id=chat_id,
                document=document_file,
                caption=caption,
                parse_mode=parse_mode,
            )
            logger.debug("–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}".format(chat_id=chat_id))
            return True
        except Exception as e:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –≤ —á–∞—Ç {chat_id}: {error}".format(chat_id=chat_id, error=str(e)))
            return False

    async def close(self) -> None:
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API.
        """
        if self.bot:
            await self.bot.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API –∑–∞–∫—Ä—ã—Ç–æ")
