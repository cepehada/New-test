"""
News Bot.
–†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –∞–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏
—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞.
"""

import asyncio
import logging
import hashlib
from datetime import datetime
from typing import List, Dict, Any, Optional, Type

from nltk.sentiment.vader import SentimentIntensityAnalyzer
from project.config import load_config
from project.utils.notify import NotificationManager
from project.base_bot import BaseBot  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
from project.news.parsers.base_parser import NewsParser  # –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç

config = load_config()
logger = logging.getLogger("NewsBot")


class NewsBot(BaseBot):
    """
    –ö–ª–∞—Å—Å –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –±–æ—Ç–∞.

    –ü–∞—Ä—Å–∏—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –ø–∞–º—è—Ç–∏.
    """

    def __init__(self, parsers: Optional[List[NewsParser]] = None) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –±–æ—Ç.

        Args:
            parsers: –°–ø–∏—Å–æ–∫ –ø–∞—Ä—Å–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        super().__init__(name="NewsBot")
        self.config = config
        self.article_limit = self.config.news.NEWS_ARTICLE_LIMIT
        self.long_keywords = [
            s.strip() for s in self.config.news.LONG_KEYWORDS.split(",")
        ]
        self.short_keywords = [
            s.strip() for s in self.config.news.SHORT_KEYWORDS.split(",")
        ]
        self.exit_keywords = [
            s.strip() for s in self.config.news.EXIT_KEYWORDS.split(",")
        ]
        self.articles: List[Dict[str, Any]] = []
        self.sia = SentimentIntensityAnalyzer()
        self.notifier = NotificationManager()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        self.parsers = parsers or []

    async def update_articles(self) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π, –æ–±—ä–µ–¥–∏–Ω—è—è –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.

        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ
        —Å—Ç–∞—Ç—å–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º.
        """
        if not self.parsers:
            self.logger.warning("No parsers configured, can't update articles")
            return
            
        new_articles = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –æ—Ç –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [parser.fetch_articles() for parser in self.parsers]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–µ–π –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞ {i}: {result}")
                continue
                
            for art in result:
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ö—ç—à –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
                art_hash = hashlib.sha256(
                    (art["title"] + art["content"]).encode()
                ).hexdigest()
                art["hash"] = art_hash
                art["analyzed"] = self.sia.polarity_scores(art["content"])
                art["fetched_at"] = datetime.now().isoformat()
                new_articles.append(art)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                self._check_keywords_and_notify(art)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è (–Ω–æ–≤–µ–π—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
        new_articles.sort(key=lambda x: x["fetched_at"], reverse=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ª–∏–º–∏—Ç—É
        self.articles = new_articles[:self.article_limit]
        
        self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(new_articles)} —Å—Ç–∞—Ç–µ–π")

    def _check_keywords_and_notify(self, article: Dict[str, Any]) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—å—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        
        Args:
            article: –°—Ç–∞—Ç—å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        content = article["title"] + " " + article["content"]
        content = content.lower()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        long_match = any(kw.lower() in content for kw in self.long_keywords)
        short_match = any(kw.lower() in content for kw in self.short_keywords)
        exit_match = any(kw.lower() in content for kw in self.exit_keywords)
        
        if long_match or short_match or exit_match:
            signal_type = []
            if long_match:
                signal_type.append("LONG")
            if short_match:
                signal_type.append("SHORT")
            if exit_match:
                signal_type.append("EXIT")
                
            message = (
                f"üö® {', '.join(signal_type)} —Å–∏–≥–Ω–∞–ª!\n"
                f"üì∞ {article['title']}\n"
                f"üîó {article['link']}\n"
                f"üìä –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {article['analyzed']['compound']:.2f}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            try:
                self.notifier.send_notification(message, level="alert")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def get_last_articles(self, limit: Optional[int] = None) -> List[Dict[str, Any]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –Ω–æ–≤–æ—Å—Ç–µ–π.

        Args:
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è limit –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫)

        Returns:
            –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        """
        if limit is None:
            limit = self.article_limit
        return self.articles[:limit]
        
    def add_parser(self, parser: NewsParser) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –ø–∞—Ä—Å–µ—Ä –≤ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Å–µ—Ä–æ–≤.
        
        Args:
            parser: –ü–∞—Ä—Å–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        self.parsers.append(parser)
        self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–∞—Ä—Å–µ—Ä: {parser.source_name}")

    async def run(self) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –±–æ—Ç–∞.

        –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
        """
        update_interval = self.config.news.UPDATE_INTERVAL
        self.logger.info(f"–ó–∞–ø—É—Å–∫ NewsBot —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update_interval}—Å")
        
        while self.is_running:
            try:
                await self.update_articles()
                await asyncio.sleep(update_interval)
            except asyncio.CancelledError:
                raise
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")
                await asyncio.sleep(update_interval)  # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
