"""
–ú–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram.
–†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.
–ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π.
"""

import asyncio
from aiogram import Router, types
from aiogram.filters import Command
from project.config import load_config
from project.risk_management.portfolio_manager import PortfolioManager
from project.risk_management.var_calculator import calculate_var
from project.bots.news.news_bot import NewsBot

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = load_config()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
portfolio_manager = PortfolioManager()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
news_bot = NewsBot(config)


@router.message(Command("portfolio"))
async def cmd_portfolio(message: types.Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /portfolio.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏.
    """
    positions = await portfolio_manager.get_all_positions()
    if not positions:
        await message.answer("üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç.")
        return

    response = "üìä –¢–µ–∫—É—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å:\n"
    for pos in positions:
        response += (
            f"- {pos['symbol']} | –ö–æ–ª-–≤–æ: {pos['amount']} | "
            f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {pos['entry_price']}\n"
        )

    await message.answer(response)


@router.message(Command("risk"))
async def cmd_risk(message: types.Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /risk.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á—ë—Ç –ø–æ —Ä–∏—Å–∫–∞–º –∏ —Ä–∞—Å—á—ë—Ç VaR.
    """
    closed_trades = await portfolio_manager.get_closed_trades()
    if not closed_trades:
        await message.answer("üîî –ù–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ VaR.")
        return

    returns = [trade.get("pnl", 0) for trade in closed_trades]
    var_95 = calculate_var(returns, confidence=0.95)
    var_99 = calculate_var(returns, confidence=0.99)

    response = (
        "üìà –†–∏—Å–∫-–æ—Ç—á—ë—Ç:\n"
        f"- VaR (95%): {var_95:.2f}\n"
        f"- VaR (99%): {var_99:.2f}"
    )

    await message.answer(response)


@router.message(Command("news"))
async def cmd_news(message: types.Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /news.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π.
    """
    latest_news = await news_bot.get_last_articles(limit=5)

    if not latest_news:
        await message.answer("üì∞ –°–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç.")
        return

    response = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
    for article in latest_news:
        response += (
            f"üîπ {article['title']}\n"
            f"üåê [–ß–∏—Ç–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ]({article['url']})\n\n"
        )

    await message.answer(response, parse_mode="Markdown", disable_web_page_preview=True)


@router.message(Command("trade_status"))
async def cmd_trade_status(message: types.Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /trade_status.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫ (–æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö).
    """
    open_positions = await portfolio_manager.get_all_positions()
    closed_trades = await portfolio_manager.get_closed_trades(limit=5)

    response = "üìå –°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–æ–∫:\n\n"

    if open_positions:
        response += "üî∏ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n"
        for pos in open_positions:
            response += (
                f"{pos['symbol']} | –ö–æ–ª-–≤–æ: {pos['amount']} | "
                f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {pos['entry_price']}\n"
            )
    else:
        response += "üî∏ –û—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç.\n"

    response += "\nüîπ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏:\n"
    if closed_trades:
        for trade in closed_trades:
            response += (
                f"{trade['symbol']} | PnL: {trade['pnl']:.2f} | "
                f"–í—Ä–µ–º—è: {trade['timestamp']}\n"
            )
    else:
        response += "–ó–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–µ—Ç.\n"

    await message.answer(response)


@router.message(Command("help"))
async def cmd_help(message: types.Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /help.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.
    """
    response = (
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/portfolio ‚Äî —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏\n"
        "/risk ‚Äî –æ—Ç—á—ë—Ç –ø–æ —Ä–∏—Å–∫–∞–º\n"
        "/news ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n"
        "/trade_status ‚Äî —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–æ–∫\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

    await message.answer(response)
